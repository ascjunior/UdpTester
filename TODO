1) Controle do tamanho dos pacotes---------------------------------------------------------------OK
	- Por parâmetro de entrada, limitada em valores mínimo (40). e máximo(1496).
		- Configuração no transmissor
		- Buffer do transmissor segundo parâmetro de entrada
		- Buffer do receptor no valor máximo
2) Controle do tamanho da rajada-----------------------------------------------------------------OK
	- Por parâmetro de entrada, limitado em valores mínimo(2) e máximo(500).
		- Configuração no transmissor
3) Controle do número de rajadas sequenciais-----------------------------------------------------OK
	- Por parâmetro de entrada, limitada em valores mínimo(1) e máximo(10)
		- Configuração no transmissor
		- Implementação
			- Necessário header no pacote, identificando a a rajada (adicionalmente pode ser identificado o número do pacote na rajada para enventuais cálculo de perdas)
			- Identificação da rajada no receptor.
	
4) Resultado automatizado no receiver------------------------------------------------------------OK
	- Mensagem de fim de teste no transmissor.

5) Scripts para testes---------------------------------------------------------------------------OK

6) Controle do buffer para sockets---------------------------------------------------------------OK
	- Por parâmetro de entrada
		- Configuração no transmissor e no receptor
			- Testes com tamanhos idênticos de buffer???????????
			- Testes com diferentes tamanhos de buffer para receptor e transmissor???????????

7) Testes Bidirecionais
	- Excluir entidades transmissor e receptor
	- Apenas um executável rodando de ambas as formas.
		- Quando transmissor, inicia os testes;
		- Quando receptor apenas responde aos probes de teste.
	- Parâmetros do probe nos pacotes
		- Tamanho dos pacotes;
		- Número de pacotes por trem;
		- Número de trens;
		- Intervalo entre os trens.
	- Parâmetros externos
		- Ip do host receptor;
		- Porta;
		- Tamanho do socket buffer.

8)



Estrutura
	Tester
	s	Sender
			Trem de pacotes
				Parametros: socket_buffer_size, host_addr, packet_size, train_size, train_num, train_interval, rate
			Continuo
				Parametros: socket_buffer_size, host_addr, packet_size, test_time, rate
	c	Receiver
			Trem de pacotes
				Parametros: socket_buffer_size
			Continuo
				Parametros: socket_buffer_size


Param
	mode_type			-- sender, receiver
	test_type			-- trem, continuo, ambos???
	socket_rcv			-- valores diferentes para rcv/send???
	socket_send
	host_addr			-- modo sender, modo receiver receberá host_addr no teste
	packet_size			-- modo sender, modo receiver receberá packet_size no teste
	train_size			-- modo sender, modo receiver receberá train_size no teste (teste com trem de pacotes)
	train_num			-- modo sender, modo receiver receberá train_num no teste (teste com trem de pacotes)
	train_interval		-- modo sender, modo receiver receberá train_interval no teste (teste com trem de pacotes)
	rate				-- modo sender, modo receiver receberá rate no teste
	test_time			-- modo sender, modo receiver receberá rate no teste

Packet
	PACKET_TYPE			--	TRAIN_TEST, CONTINUO_TEST, END_TEST, CTRL (inicio de teste de trem, inicio de teste continuo, 
	PROBE_ID
	TRAIN_ID
	PACKET_ID
	TRAIN_SIZE
	TRAIN_MAX
	PACKET_SIZE
	HOST_ADDR(IPv4)
	TRAIN_INTERVAL
	RATE
	INT_TEST
	

Modo Sender
	Conexão de controle (recebe e envia, dois sockets?)
		-- sinaliza inicio de teste
			-- espera resposta (timeout??)
			-- inicia teste (thread)
			-- recebe feedback do receiver
				-- resultados satisfatórios??
			-- recebe sinalização de teste de upload
	Conexão de dados
		-- teste sender
			-- trem de pacotes
			-- continuo
		-- teste receive
			-- trem de pacotes
			-- continuo
			-- fim de teste
				-- analisa resultados
				-- informa ao sender os resultados (taxa, erros/perdas) através da conexão de controle

Modo Receiver
	Conexão de controle (recebe e envia, dois sockets?)
		-- espera sinal de teste
			-- responde ao sender
			-- prepara recv de teste (thread)
	Conexão de dados
		-- teste sender
			-- trem de pacotes
			-- continuo
		-- teste receive
			-- trem de pacotes
			-- continuo
			-- fim de teste
				-- analisa resultados
				-- informa ao sender os resultados (taxa, erros/perdas) através da conexão de controle


-----
Modo sender
init:
		identifica_teste
		cria_pacote
		envia_pacote
		espera_resposta
		inicia_teste
			fim_de_teste
		espera_resultados
			calcula_proximo_teste
		espera_teste_upload
			inicia_recv_teste
			fim_teste
			envia_resultados
		espera intervalo_proximo_teste
		goto init

-----
Modo receiver
init:
		espera_msg_inicio_teste
			inicia_recv_teste
			fim_teste
			envia_resultados
		identifica_teste
		cria_pacote
		envia_pacote
		espera_resposta
		inicia_teste
			fim_de_teste
		espera_resultados
			calcula_proximo_teste
		goto init	

------------------------------------------------------------------------
----NOVAS DIREÇÕES
------------------------------------------------------------------------

void loop_control (settings *conf_settings) {
	fila_send_msg
		-- fila de mensagens de controle para send, verificada pela thread de controle que envia msg
	fila_rcv_msg
		-- fila populada pela thread de receive para mensagens de controle

	struct_sockets???
	socket_init()
		-- estrutura com dados dos sockets de send/rcv para mensagens de controle (deve ser tcp!!) e inicialização


	inicia_conexão_de_controle(conf_settings, struct_sockets)--send e receive???, uma ou duas threads de controle???
			2 THREADs de CTRL:
				- modo server: espera conexão de cliente
					- recebe sinal de inicio de teste
					- recebe log de teste
				- modo cliente: busca conexão com servidor
					- envia sinal de incio de teste
					- envia log de teste
			CALLBACKS para lista de msg??? -- NÃO: loop de controle
					
					Verifica lista de msg para envio
			THREAD para RCV de controle!, mensagens recebidas adicionadas a uma fila de controle, thread independente (e as msgs duplicadas?)
	if (conf_settings->mode == SENDER) {
		while (1) {
			loop_control_sender (conf_settings, )
			----entra no modo receiver????
			loop_control_receiver (conf_settings)
			sleep(conf_settings->loop_test_interval)
		}
	}
	else {
		while (1) {
			loop_control_receiver (conf_settings)
			sleep(30s)
			loop_control_sender (conf_settings)
			sleep(30s)
		}
	}
}

int start_ctrl_connection_send (settings *conf_settings) {
	int ret = 0;

	socket_send???
		inicializa socket para envio de mensagens de controle
	socket_rcv???
		inicializa socket para receber mensagens de controle
			-- criar thread para isso
			-- constantemente ouvindo porta de controle

	return ret;
}

int start_ctrl_connection_rcv (settings *conf_settings) {
	int ret = 0;

	socket_send???
		inicializa socket para envio de mensagens de controle
	socket_rcv???
		inicializa socket para receber mensagens de controle
			-- criar thread para isso
			-- constantemente ouvindo porta de controle

	return ret;
}

//simplificado: executa teste continuo depois teste com trem de pacotes sempre
void loop_control_sender (settings *conf_settings) {
	send_inicio_teste () --através da conexão de controle envia inicio de teste e tipo de teste, adiona msg a lista de envio
		espera_resposta --através da lista de mensagens recebidas
	inicia_teste() --abre conexão, envia probes e retorna
	recv_report() --através da conexão de controle recebe report do teste, alterar probe???
	--envia mensagem de confirmação
}

void loop_control_receiver (settings *conf_settings) {
	
	while(modo=RECEIVER)
		sleep...
	{CALLBACK????
		espera_msg_controle --através da conexão de controle espera mensagem de inicio de teste de up --lista de mensagens recebidas
			mensagem de inicio de teste?
			send_ok
			inicia_recv_teste() --inicia recepção de teste, tipo, parametros...
			cria_relatorio() --cria relatorio do teste e imprime (log, console...)
			envia_relatorio_teste() --através da conexão de controle --lista de mensagens de envio
				--espera mensagem de confirmação
	}
	inicia_recv_teste() --inicia recepção de teste simplificado
	cria_relatorio() --cria relatorio do teste e imprime (log, console...)
	envia_relatorio_teste() --através da conexão de controle
}



--CONTROLE DENTRO DAS THREADS DE SEND/RCV DE MENSAGENS DE CONTROLE

server
	cria socket para listen
		recebe conexão
		espera mensagens do cliente
			pedido de inicio de teste down (parametrizado???)
				envia confirmação
				cria callback para envio de teste
			relatório de testes down
				envia confirmação
				callback para revisão dos parâmetros de testes??? --tabela com dados de testes para cada cliente(IP???)
			pedido de inicio de teste up (parametrizado???)
				envia confirmação
				cria callback para receber teste
			pedido de relatório de teste up
				envia relatório de teste up


cliente
	cria socket para connect ao server
		estabelece conexão
		envia pedido de inicio de teste down(parametros do teste???)
			recebe confirmação
			cria thread para receber testes
		envia relatório de testes
			recebe confirmação
		envia pedido de inicio de teste up
			recebe confirmação
			cria thread para enviar teste
		pedido de relatório de teste de up
			recebe relatório


------CONTROLE EXTERNOS AOS MÉTODOS DE SEND/RECEIVE (NECESSÁRIAS DUAS CONEXÕES)


SERVER_CTRL

	INIT
		recvctrl_thread: thread para receber msg
			recebe conexão	-- coloca mensagem tipo receiver_connect (com ip) na lista das mensagens recebidas
			espera mensagens de cliente	-- mensagens adicionadas na lista

	LOOP
		listen_msg_list()
		switch (msg_type)
			receiver_connect: --cliente conectado ao server, recebe msg
				cria thread para connect ao cliente (envio de msg) --conexão estabelecida?
																   --adiciona mensagem de sender_connect na lista das mensagens recebidas
			sender_connect: --server conectado ao cliente, envia msg
				envia mensagem de inicio de teste de down, tipo start_test_down (envio do tipo de teste??? parametros do teste???)
			feedback_start_test_down:
				cria thread para envio de teste de down
			feedback_test_down:
				armazena relatório de teste down (feedback do cliente)
			start_test_up:
				cria thread para receber teste up (tipo de teste na mensagem???)
					--fim de teste:
						-- cria relatório de teste
						-- envia relatório de teste com mensagem do tipo feedback_test_up
						-- adiciona mensagem na lista de mensagem recebidas (workaround!!!) tipo loop_test_interval
				envia feedback para inicio de teste de up, tipo feedback_start_test_up
			loop_test_interval:
				loop(test_interval)
				envia mensagem de inicio de teste de down, tipo start_test_down (envio do tipo de teste??? parametros do teste???)
				

CLIENT_CTRL

	INIT
		recvctrl_thread: thread para receber msg
			cria socket para listen
				recebe conexão	-- coloca mensagem de conexão estabelecida (receiver_connect) na lista das mensagens recebidas
				espera mensagens do server -- mensagens adicionadas na lista
		sendctrl_thread: thread para enviar msg
			cria socket para connect
				conexão estabelecida -- coloca mensagem de conexão estabelecida (sender_connect) na lista de mensagens recebidas

	LOOP

		listen_msg_list()
		switch (msg_type)
			sender_connect: --cliente conectado ao server, envia msg
				conexão estabelecida entre cliente e server -- nada a fazer :(
			receiver_connect: --server conectado ao cliente, recebe msg
				conexão estabelecida entre server e cliente -- nada a fazer :(
			start_test_down:	--mensagem enviada pelo server sinalizando inicio de teste de down
				cria thread para receber teste (tipo de teste na mensagem???)
					--fim de teste:
						-- cria relatório de teste
						-- envia relatório de teste com mensagem do tipo feedback_test_down
						-- envia mensagem de inicio de teste de up com tipo start_test_up
				envia mensagem de feedback_start_test_down
			feedback_start_test_up:
				cria thread para envio de teste de up
			feedback_test_up:
				armazena relatório de teste up (feedback do server) 
					--fim do loop de teste:
						-- opção 1: não faz nada, espera loop no server para novo ciclo de teste down/up
						-- opção 2: finaliza threads de recv/send mensagens
						OBS: por enquanto... opção 1
				


RESUMO:
	SERVER_CTRL											CLIENT_CTRL
		recvctrl_thread										recvctrl_thread
															sendctrl_thread
		switch(lstmsg->top)									switch(lstmsg->top)
			receiver_connect:									sender_connect:
				sendctrl_thread										nop
			sender_connect:										receiver_connect:
				send start_test_down								nop
			feedback_start_test_down:							start_test_down:
				sendtest_thread										recvtest_thread
			feedback_test_down:											create_result
				save_result_down										send feedback_test_down
			start_test_up:												send start_test_up
				recvtest_thread										send feedback_start_test_down
					create_result								feedback_start_test_up:
					send feedback_test_up							sendtest_thread
					loop_test_interval							feedback_test_up:
				send feedback_start_test_up							save_result_up
			loop_test_interval:
				loop(test_interval)
				send start_test_down
			

---TIPOS DE MENSAGENS

	RECEIVER_CONNECT = 0,		/**< Sinalização para conexão recebida. >*/
		recvctrl_thread recebeu nova conexão --MENSAGEM INTERNA
			-- pode ser cliente conectando ao server ou inverso
			-- mensagem ter que informar o IP de quem se conectou (para conexão reversa no server)

	SENDER_CONNECT,				/**< Sinalização para conexão estabelecida com host remoto. >*/
		sendctrl_thread se conectou ao host remoto --MENSAGEM INTERNA
			-- pode ser server ou client
			-- não é necessário qualquer parâmetro			

	START_TEST_DOWN,			/**< Requisição para teste de download. >*/
		server envia mensagem para o cliente indicando que teste de download será realizado
			-- muitos parâmetros
				-- tipo do teste
					-- continuo
						-- tempo de teste (em ms)
						-- intervalo de amostragem (em ms)
						-- tamanho do pacote (em bytes)
						-- socket buffer send (em KB)
						-- socket buffer recv (em KB)
						-- porta para teste (inteiro)
						-- taxa de transmissão (em Mbps)
					-- trem de pacotes
						-- tamanho do pacote (em bytes)
						-- tamanho do trem (em número de pacotes)
						-- número de trens (inteiro)
						-- intervalo entre trens (em ms)
						-- socket buffer send (em KB)
						-- socket buffer recv (em KB)
						-- porta para teste (inteiro)
						-- taxa de transmissão (em Mbps)

	FEEDBACK_START_TEST_DOWN,	/**< Confirmação para início de teste de download. >*/
		client envia confirmação de liberação para teste de download
			-- nenhum parâmetro é necessário

	FEEDBACK_TEST_DOWN,			/**< Relatório de teste de download. >*/
		client envia relatório após fim de teste de download
			-- muitos parâmetros
				--continuo
					-- tempo de teste (em ms) --OBS: tempo entre o primeiro pacote de teste recebido e o primeiro pacote de fim de teste
					-- tamanho do pacote (em bytes) --OBS: tamanho médio dos pacotes recebidos durante o teste
					-- tamanho do socket recv (em KB) --OBS: caso não tenha se conseguido alterar o tamanho do buffer local
					-- relatório das amostras no payload:
						#AMOSTRA	PACKET_SIZE		#PACKETS	#BYTES		BWMED
						   ...		    ...			   ...		  ...		 ...
						TOTAL		PACKET_SIZE		#PACKETS	#BYTES		BWMED
				--trem de pacotes
					-- tamanho médio dos pacotes recebidos (em bytes)
					-- número médio de pacotes por trem (inteiro -- número de pacotes)
					-- número de trens (inteiro)
					-- intervalo médio entre os trens (em ms)
					-- tamanho do socket recv (em KB)
					-- relatório das amostras no payload:
						#AMOSTRA	PACKET_SIZE		#PACKETS	#BYTES		BWMED	INTERVA_TIME
						  ...		    ...			   ...		  ...		 ...	    ....
						TOTAL		PACKET_SIZE		#PACKETS	#BYTES		BWMED
					
	START_TEST_UP,				/**< Requisição para teste de upload. >*/
		cliente envia mensagem para o server indicando que teste de upload será realizado
			-- muitos parâmetros
				-- tipo do teste
					-- continuo
						-- tempo de teste (em ms)
						-- intervalo de amostragem (em ms)
						-- tamanho do pacote (em bytes)
						-- socket buffer send (em KB)
						-- socket buffer recv (em KB)
						-- porta para teste (inteiro)
						-- taxa de transmissão (em Mbps)
					-- trem de pacotes
						-- tamanho do pacote (em bytes)
						-- tamanho do trem (em número de pacotes)
						-- número de trens (inteiro)
						-- intervalo entre trens (em ms)
						-- socket buffer send (em KB)
						-- socket buffer recv (em KB)
						-- porta para teste (inteiro)
						-- taxa de transmissão (em Mbps)

	FEEDBACK_START_TEST_UP,		/**< Confirmação para início de teste de upload. >*/
		server envia confirmação de liberação para teste de upload
			-- nenhum parâmetro é necessário

	FEEDBACK_TEST_UP,			/**< Relatório de teste de upload. >*/
		server envia relatório após fim de teste de download
			-- muitos parâmetros
				--continuo
					-- tempo de teste (em ms) --OBS: tempo entre o primeiro pacote de teste recebido e o primeiro pacote de fim de teste
					-- tamanho do pacote (em bytes) --OBS: tamanho médio dos pacotes recebidos durante o teste
					-- tamanho do socket recv (em KB) --OBS: caso não tenha se conseguido alterar o tamanho do buffer local
					-- relatório das amostras no payload:
						#AMOSTRA	PACKET_SIZE		#PACKETS	#BYTES		BWMED
						   ...		    ...			   ...		  ...		 ...
						TOTAL		PACKET_SIZE		#PACKETS	#BYTES		BWMED
				--trem de pacotes
					-- tamanho médio dos pacotes recebidos (em bytes)
					-- número médio de pacotes por trem (inteiro -- número de pacotes)
					-- número de trens (inteiro)
					-- intervalo médio entre os trens (em ms)
					-- tamanho do socket recv (em KB)
					-- relatório das amostras no payload:
						#AMOSTRA	PACKET_SIZE		#PACKETS	#BYTES		BWMED	INTERVA_TIME
						  ...		    ...			   ...		  ...		 ...	    ....
						TOTAL		PACKET_SIZE		#PACKETS	#BYTES		BWMED

	LOOP_TEST_INTERVAL,			/**< Mensagem para inicio de intervalo entre testes. >*/
		server adiciona mensagem a lista indicando intervalo entre testes. --MENSAGEM INTERNA



ctrlpacket
	packet_type		(RECEIVER_CONNECT, SENDER_CONNECT, START_TEST_DOWN, FEEDBACK_START_TEST_DOWN, FEEDBACK_TEST_DOWN, START_TEST_UP, FEEDBACK_START_TEST_UP, FEEDBACK_TEST_UP, LOOPTEST_INTERVAL)
	packet_size
	connected_address
	test_type				--test_down, test_up, feedback_test_down, feedback_test_up
		packet_size
		train_size
		train_num			(ou test_time_interval, ou test_interval)
		train_interval		(ou report_time_interval)
		sendsock_buffer
		recvsock_buffer
		udp_port
		udp_rate
		...payload
	loop_test_interval




##############################################CORREÇÕES
	1) OUTPUTS NÃO DEVEM ESTAR DENTRO DE THREADS...
	2) THREADS NÃO DEVEM CRIAR THREADS...
		start_recvtest_thread
			a) cria thread de recv
				received_probe
				recv_continuo_burst (int port, int soc_buffer_size, int report_interval, char *device, char *log_file, resume *result)
			b) envia feedback de inicio de teste
				add pkt na send_queue
			c) cria thread de timeout
				received_probe
			espera resposta (join) -- das duas threads, sincronização de variáveis start/stop...
			loga resultado (print)
				write file...
			envia feedback de resultado de teste
				add pkt report na send_queue
			
		start_sendctrl_connection
			a) cria a thread de send
				send_continuo_burst (conf_settings->udp_port,
					conf_settings->sendsock_buffer, conf_settings->udp_rate,
					conf_settings->test.cont.size, conf_settings->packet_size,
					conf_settings->address.sin_addr.s_addr, NULL);
				send_continuo_burst (int port, int soc_buffer_size, int send_rate, int burst_size, int packet_size, u_long addr, char *log_file)
				interval_packet, packet_num

			b) loga resultado

2010 - An Overview of Quality of Experience Measurement Challenges for Video Applications in IP Networks

2010 - A Quest for an Internet Video Quality-of-Experience Metric

SIM 2010 - 165 - A Generic Quantitative Relationship between Quality of Experience and Quality of Service

SIM 2011 - 41 - Measuring the Quality of Experience of HTTP Video Streaming

2001 - 147 - Metrics for the internet age: Quality of experience and quality of business

2007 - 39 - A Proposed Approach for Quality of Experience Assurance for IPTV

SIM 2008 - 27  - Passive Estimation of Quality of Experience

SIM 2010 - 45 - Quality of Experience from user and network perspectives

2011 - 37 - A Generic Quantitative Relationship between Quality of Experience and Quality of Service
